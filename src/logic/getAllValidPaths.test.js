import {getAllValidPaths} from "./getAllValidPaths";
import {convertStringToPuzzleAndCivilians} from "./convertPuzzleString";

describe("getAllValidPaths snapshot tests", () => {
  const puzzleStringsWithCivilians = [
    "17E6B6B6B6S17",
    "17EBB4B1B4BBF4B6S17",
    "15EBDBK4B1B4FBB4B6S17",
    "17E5FBB4DBB4BBK5B6S10",
    "17KBF3FB1B3DBED3BBB4SBK16",
    "16EKF4DFD4FKF4BBS23",
    "22FBEBF2BDBDB2FB1BK2BKBBB3BSB9",
    "8KBDBF2BEF1B2FBDBD2B1B1B2KBKBB2B1B1B2FBBSB8",
    "17FBJ4B1B2EBBBB4B6S17",
    "15E2JB2B2BB2DBBBF4BK5S17",
    "24FBJ3BBEB3FBBF5S16",
    "17JBB4B1F3EBBB3BB1B4FBS15",
    "8EBDB6B3BBBBF2BB2B2FBBBB3K1JB3BBBS8",
    "9BEB3KBDBB2F1B1F2DBDBB2B1B1B2KBJBK3BSB9",
    "15E1BBP2B1B1B2PBBBF4B6S17",
    "8EBDBP5B3BBBBF2B3B2FBBBB3K1B3PBBBS8",
    "23EKF4BBP4FDB4PBS16",
    "16BEB3BPFPB2B1B1F2PBBFP3BSB16",
    "8EBF1P4B1B2FBJBF2B1B1B2KBDBP2F1B1B2PBP1S8",
    "8EBBBP4B1J2JBBBF2B1F1B2FBBBB2B1F1B2PBBBS8",
    "17XBY2EBB1B4FBZ4B6S17",
    "23ZBJ3EBFB4FBY4S18",
    "16YBZ3BBJBB2SF1FE2BBBBB3XFW16",
    "21FBBEBBFB1BJB1BZBBXBBY2FBF4BSB9",
    "9BEB4BBY4FBB4BZJ4FBB4BBX4SBB9",
    "16FBE3BPXBB2FBZPF2BPYBB3SFP16",
    "9BEB4PBF4WBX4PVB4ZJP4BYB4FSP9",
    "17E6X6Y6Z6S17",
    "2BEB3PDZDP4B3PJBDBKPXB1B1BKPKBDBWP3B4PJYKP3BSB2",
    "17H6B6B6B6S17",
    "22PFFFP2FFEFF2FFSFF2PFFFP15",
    "22PFWFP2FFEFF2YFSFZ2PFXFP15",
    "22PWFXP2FFEFF2YFSFZ2PFFFP15",
    "22PFFFP2FWEVF2YFSFX2PFZFP15",
    "22PFWFP2FVEXF2YFSFZ2PFFFP15",
    "2FBF3BBEBB2FBBBF3BBB5B5SBF3FBBBF2BB1BB2FP1PF1",
    "2FBF3BBEBB2FBBBF3PBP5B5SBF3FBBBF2BB1BB2FP1PF1",
    "2FBF3BBEBB2YBBBX3PBP5B5SBF3ZBBBW2BB1BB2BP1PB1",
    "2FBF3BBEBB2VBXBW3BBB5B5SBJ3ZBBBY2BB1BB2FP1PF1",
    "2FBF3BBEBB2XBBBW3PBP5B5SBF3YBJBZ2BB1BB2BP1PB1",
    "2BWB3BBEBB2XBBBY3PBP5B5SBJ3ZBBBF2BB1BB2BP1PB1",
    "2BWB3BBEBB2ZBBBX3PBP5B5SBF3FBBBY2BB1BB2JP1PF1",
    "2YBF3BBEBB2WBBBF3PBP5B5SBF3ZBBBX2BB1BB2JP1PJ1",
    "2FBF3BDEDB2FBDBF3KBK5D5SBF3FBBBF2BK1KB2JJ1JJ1",
    "16BFB2FBJBFBFBEB1BSBFBFBJBF2BFB16",
    "16BFB2FBJBXBZBEB1BSBYBFBJBF2BFB16",
    "16BZB2WBJBFBYBEB1BSBFBFBJBF2BXB16",
    "16BZB2WBJBFBXBEB1BSBFBFBJBF2BYB16",
    "16BYB2FBJBFBFBEB1BSBZBFBJBF2BXB16",
    "2BEB4BBB3JBBBJ2BF1FB2B3B2B3B2BF1FB2JBBBJ3BSB2",
    "2BEB4FDF4PFK4BFP4KDB4PFK4BDP4FBF4BSB2",
    "2BEB4FDK4PBY4BFP4KBF4PZB4BFP4FDF4BSB2",
    "2BEB4BPB4YBX4BPB4BFB4BPB4WBZ4BPB4BSB2",
    "2BEB4FYF4PBB4XBP4BFB4PBF4BWP4FBZ4BSB2",
    "2BEB4FBK4PDZ4BBP4KXJ4PBB4YDP4FBB4BSB2",
    "3E6F6P5PPP4VJB4BZB4XBY4WBB4PSP2",
    "9P5WF4BBB5FBJZB2XBYBBP2B2B3S2E8",
    "15B1JFFE2XFPB2JFZF3FPFY3FB2B2S4B7",
    "10P5EF3PFYJ5FFJ3ZFFFX2P2FFP4F6S2",
    "8P1P3PFYFP3XFW5E5VFZFJ2FFFFJP1FF2J2P3S1",
    "9PEP4FFF5D5JKJ2PFXJZFP2YSW4F1F3PF1FP1",
    "1P3P2YKEKB3BDB5V3PXBJBBPBDFKFDBPZBSBWP1PF1FP3B1B2",
    "16FFF3BBBBB2B1E1B2BBBBB2BZXYB3BBB5S3",
    "8FF1FF2BBEBB2BPDPB2BBXBB2ZBKBY3BSB16",
    "16JDJ3ZBBBY2BKBKB2BBSBB3BEB4XDW9",
    "8FFFFF2BXYZB2B1J1B2PBJBP2BBEBB3BSB16",
    "10E6F5PYP3B1B1B1PJBBBJP1ZFSFX3FFF9",
    "1ZFFFW2BBBBB2BKBKB1DBPBPBDEBBBBBS1BJ1JB3BBB4YFX9",
    "2BEB2FDFBFDFZ2J2VBKPBPKB1PBYBP1BFPBPFBXKB1BKWFDFBFDF2BSB2",
    "16E1PZ2PDBBB3BKPY2PFJ5B6S11",
    "10E5FBB4DBK4BBB4BDK4FBB5S10",
    "16E5FJF4FFJFF2FFJFF4F4SFF10",
    "17WBE2BFBJB2YBJBZ2BJBF3SBX17",
    "3BBBE1VBFBWB1B1B1BBBJBZBJBBB1B1BBBYBFBXBBB1B1B1BJBJBJ1SBBB3",
    "8EBF4BDBPBF1FBJJDK3KBK2FBJJDK1BDBPBF1SBF10",
    "2BEB4B1B3PBFBP3B1B3PBJBP3F1F3PBFBP3F1F3PJSJP1",
    "1PBEZP3B1F3PXJBP3F1B3PYJBP3B1F3PWJBP3F1B3PVSBP1",
    "2BEB4B1F3PXJBP3F1B3PYJZP3B1F3PWJBP3B1B4BSB2",
    "1PBEBP3F1X3PYJFP3B1B3PFJZP3B1B3PWJFP3B1B4BSB2",
    "2BEB4B1V3PFJBP3Y1B3PBJZP3B1F3PXJBP3B1W3PBSBP1",
    "1PFEFP3B1B3PYBWP3B1B3PFJZP3B1B3PVJXP3B1B3PFSFP1",
    "1PBEBP3D1K3PBFBP3K1D3PBFBP3F1K3PDFBP3B1F3PBSBP1",
    "23PYP4EJF4BZS23",
    "16BXFE3ZBBP3BPBY3JBSB22",
    "15BEBBW2XBBPB2BVFZB2JPBBF2BYBSB15",
    "15EBBBX2BJFZB2BFWJB2BYJFB2VBBBS15",
    "15EBPBF2BWBYB2PBJBP2BZBXF2FBPFS15",
    "8PBBBBB1BEXFPB1BZBPFB1BFPBYB1BPFWSB1BBBBBP14",
    "15PBBBBJ1ZEXFPB1BBBPFB1BFPBYB1BPFWSB1VBBBBP7",
    "1BFDFB2KPEPK2BDKDB4B6BFF2FFBFF2FFB6B6S3",
    "9FFY3FFEFF2XFFFF3FFF4FFZ4F6F6S4",
    "2FFF3FF1FF2F1E1F2FFF1F4P1F1FFFFFFPF1FF2FFF1FFFF1S5",
    "BBDEDKBK1BDB1FF2B2PP2B5BBDFBKBB1FPKF1B1P1FP1B3P2S4",
    "2BJB2FBBPBBFBPFEFPBFBBPBBF2FBF5F6F6F6S3",
    "2PWP3PXEVP2PZBYP3PFP5F5FFJ4JFF4FF6S3",
    "9PJP3PDZDP3XEW3KDYDK2PKJKP3PFP5F6S3",
    "1P1P3PFJXF1P1V1FP1FPJ1E1PF1FZPYFJ1PFJFWP3F6F6S3",
    "15EKFKF2DFKFK2FDFDF2DFDFD2FKFKS15",
    "15FEFKF2DFKFD2FDFKF2DFDFD1SFKFKF2KFDFK8",
    "23EBZB3BWBJ3YBFB3BXBS15",
    "15FBFBF2BEBFB2FBXBF2BZBWB2FBYBS2BFBFB8",
    "15FKFDF2DFDFK2EKFDS2KFDFK2FDFKF15",
    "15FBFBF2BSBFB2FBXBF2BZBWB2VBYBE2BFBFB8",
    "15KFKFD2FSFKF2JFXFK2FZFWF2DFYFE2FDFDF8",
    "15KFKFD2FSFXF2JFYFZ2FPFPF2DFWFE15",
    "3BFBB1BBBBBFBF3SBB2BBBBB1BF1B1B1FE1BBFB3BF1BBBBB3FBF2",
    "3BXBB1BBBBBFBZ2PSBB2BBBFB1BFPB1B1FE1BBJB3BF1BBBBB3FBY2",
    "3BFBB1BBBBBVBW2PSBB2BBBFB1BFPB1B1FE1BBFB3BZ1BBBBB3XBY2",
    "3BFBB1BBBBBZBF2PSBB2BVBJB1BXPB1B1WE1BBJBP1PBY1BBBBB3FBF2",
    "3BZBB1BBBBBXBY2PSBB2BBBJB1BVPB1B1FE1BBJBP1PBW1BBBBB3FBF2",
    "3BFBB1BBBBBZBX2PSBB2BBBFB1BYPB1B1VE1BBJBP1PBW1BBBBB3FBF2",
    "3BFBB1BBDBBBBF2PSBB3FBFB1FD1B1B1FE1BBJBP2BF1BBBBB3KFK2",
    "5P2P3V1PFBYBBP1B1B1E2B1B1B1PJBWBZP1B1B1B1PXBJBBS1P1P1P1",
    "5P2P3W1PFBXBBP1B1B1E2B1B1B1PFBZBFP1B1B1B1PVBYBBS1P1P1P1",
    "5P2P3F1PXBZBBP1B1B1E2B1B1B1PVBFBFP1B1B1B1PWBYBBS1P1P1P1",
    "5P2P3V1PWBYBBP1B1B1E2B1B1B1PZBJBFP1B1B1B1PFBXBBS1P1P1P1",
    "5P2P3X1PWBFBBP1B1B1E2B1B1B1PJBYBZP1B1B1B1PVBJBBS1P1P1P1",
    "5P2P3J1PZBWBBP1B1B1E2B1B1B1PVBJBXP1B1B1B1PYBFBBS1P1P1P1",
    "5P2P3F1PFBYBBP1B1B1E2B1B1B1PZBJBWP1B1B1B1PVBXBBS1P1P1P1",
    "5P2P3F1PVBXBBP1B1B1E2B1B1B1PFBJBWP1B1B1B1PZBYBBS1P1P1P1",
    "3E4PBBBP2FBZBF2B1B1B2PBFBP2B1B1B2XBFBY2PBBBP4S3",
    "3E4PBBBP2FBZBF2B1B1B2PBXBP2B1B1B2FBYBF2PBBBP4S3",
    "3E4PBBBP2FBYBZ2B1B1B2PBFBP2B1B1B2WBXBV2PBBBP4S3",
    "3E4PBBBP2WBZBY2B1B1B2PBFBP2B1B1B2FBXBF2PBBBP4S3",
    "3E4PBBBP2XBWBV2B1B1B2PBZBP2B1B1B2FBYBF2PBBBP4S3",
    "9BEB3DBBBB2F1B1B2DBFBK2B1B1B2BBBBK3BSB9",
    "9BEB3DBBBB2F1B1B2DBFBB2B1B1B2KBKBF3BSB9",
    "9BEB3BBDBD2F1B1F2DBFBK2B1B1B2KBKBB3BSB9",
    "9BEB3DBDBD2F1B1F2DBFBK2B1B1B2KBKBK3BSB9",
    "8EBDBP4F1Z2XBBBB2BB1BY2BBBBB3KBB4BPBS8",
    "8EBDBB4B1X2ZBBBF2BB2Y2JBBBF3FBB4BKBS8",
    "8EBDBP4B1Y2BBFBF2BJB1Z2XBFBB3K1B4BPBS8",
    "8EBDBP4F1X2YBBBF2BB1BZ2JBBBB3K1J4BPBS8",
    "8EBDBP4B1Y2ZBBBF2BF1FB2JBBBX3KBB4BPBS8",
    "8EBDPP4B1Z2YBFBB2BB1BX2JBBBF3KBF4PPBS8",
    "9PEP3FBDBF1PB1P1BPFBBFBBFPB1B1BP1JBPBK3BSB9",
    "9PEP3FYDZF1PB1P1BPFBBXBBFPB1B1BP1JBPBK3BSB9",
    "9PEP3FBDYB1PB1P1BPFBBXBBWPB1B1BP1JBPZK3BSB9",
    "9PEP3FYDZF1PB1P1BPFBBWBBFPB1B1BP1JXPBK3BSB9",
    "9PEP3FBDYF1PB1P1BPFBBXBBWPB1B1BP1JBPZK3BSB9",
    "9PEP3BBDZF1PB1P1BPXBBYBBFPB1B1BP1JWPBK3BSB9",
    "9PEP3FXDZF1PB1P1BPFBBYBBFPB1B1BP1JBPBK3BSB9",
    "9PEP3BBDBY1PB1P1BPFBBFBBXPB1Z1BP1JBPBK3BSB9",
    "9PEP3BWDXF1PB1P1BPFBBZBBYPB1B1BP1JBPBK3BSB9",
    "9PEP3FWDXB1PB1P1BPBBBZBBYPB1B1BP1JBPBK3BSB9",
    "9PEP3FZDBF1PB1P1BPXBBWBBFPB1B1BP1JYPBK3BSB9",
    "9PEP3FXDZF1PB1P1BPFBBFBBFPB1Y1BP1JBPBK3BSB9",
    "9PEP3FYDZF1PB1P1BPFBBWBBFPB1B1BP1JXPBK3BSB9",
    "9PEP3FWDZF1PB1P1BPXBBFBBFPB1Y1BP1JBPBK3BSB9",
    "9PEP3FZDWF1PB1P1BPXBBYBBFPB1B1BP1JBPBK3BSB9",
    "9PEP3BBDYF1PB1P1BPFBBZBBFPB1X1BP1JBPBK3BSB9",
    "9PEP3FXDZF1PB1P1BPFBBFBBFPB1B1BP1JYPBK3BSB9",
    "9PEP3FBDBF1PB1P1BPYBBXBBFPB1B1BP1JWPZK3BSB9",
    "9PEP3FBDBF1PB1P1BPXBBWBBYPB1B1BP1JZPBK3BSB9",
    "9PEP3FXDWF1PB1P1BPFBBFBBFPB1B1BP1JYPZK3BSB9",
    "9PEP3FWDYF1PB1P1BPFBBFBBFPB1B1BP1JZPXK3BSB9",
    "9PEP3BYDZB1PW1P1BPFBBFBBFPB1B1BP1JXPBK3BSB9",
    "9PEP3FZDBF1PB1P1BPYBBXBBFPB1B1BP1JBPWK3BSB9",
    "9PEP3FWDYF1PB1P1BPFBBZBBXPB1B1BP1JBPBK3BSB9",
    "9PEP3FZDWF1PB1P1BPYBBXBBBBB1B1BB1JBPBK3BSB9",
    "9PEP3FZDYF1PB1P1BPWBBXBBBBB1B1BB1JBPBK3BSB9",
    "9PEP3FXDWF1PB1P1BPBBBZBBYBB1B1BB1JBPBK3BSB9",
    "9PEP3FWDZF1BB1P1BBBBBFBBYPB1X1BP1JBPBK3BSB9",
    "9BEB3FXDWF1PB1P1BPZBBBBBYPB1B1BP1JBPBK3BSB9",
    "9BEB3FBPBB1BD1F1KBPBFJFBPBB1F1BB1BBPBB3BSB9",
    "9BEB3FBPBB1BD1F1KBPBFJFBPBB1F1BB1BBPBB3BSB9",
  ];

  test.each(puzzleStringsWithCivilians)(
    "index",
    (puzzleStringWithCivilians) => {
      const [puzzle, startingCivilians] = convertStringToPuzzleAndCivilians(
        puzzleStringWithCivilians,
      );
      expect(
        getAllValidPaths({
          puzzle,
          startingCivilians,
          numColumns: 7,
          numRows: 9,
        }),
      ).toMatchSnapshot();
    },
  );
});
