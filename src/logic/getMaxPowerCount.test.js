import {getMaxPowerCount} from "./getMaxPowerCount";
import {features} from "./constants";

const puzzleWithZeroPowers = [
  features.outer,
  features.outer,
  features.outer,
  features.outer,
  features.outer,
  features.outer,
  features.outer,
  features.outer,
  features.outer,
  features.outer,
  features.outer,
  features.outer,
  features.outer,
  features.outer,
  features.outer,
  features.outer,
  features.outer,
  features.exit,
  features.outer,
  features.outer,
  features.outer,
  features.outer,
  features.outer,
  features.outer,
  features.basic,
  features.outer,
  features.outer,
  features.outer,
  features.outer,
  features.outer,
  features.outer,
  features.basic,
  features.outer,
  features.outer,
  features.outer,
  features.outer,
  features.outer,
  features.outer,
  features.basic,
  features.outer,
  features.outer,
  features.outer,
  features.outer,
  features.outer,
  features.outer,
  features.start,
  features.outer,
  features.outer,
  features.outer,
  features.outer,
  features.outer,
  features.outer,
  features.outer,
  features.outer,
  features.outer,
  features.outer,
  features.outer,
  features.outer,
  features.outer,
  features.outer,
  features.outer,
  features.outer,
  features.outer,
];

const puzzleWithFivePowers = [
  features.outer,
  features.outer,
  features.outer,
  features.outer,
  features.outer,
  features.outer,
  features.power,
  features.outer,
  features.outer,
  features.outer,
  features.power,
  features.outer,
  features.outer,
  features.outer,
  features.outer,
  features.outer,
  features.outer,
  features.power,
  features.outer,
  features.outer,
  features.outer,
  features.outer,
  features.outer,
  features.outer,
  features.basic,
  features.outer,
  features.outer,
  features.power,
  features.outer,
  features.outer,
  features.outer,
  features.basic,
  features.outer,
  features.outer,
  features.outer,
  features.outer,
  features.outer,
  features.outer,
  features.power,
  features.outer,
  features.outer,
  features.outer,
  features.outer,
  features.outer,
  features.outer,
  features.start,
  features.outer,
  features.outer,
  features.outer,
  features.outer,
  features.outer,
  features.outer,
  features.outer,
  features.outer,
  features.outer,
  features.outer,
  features.outer,
  features.outer,
  features.outer,
  features.outer,
  features.outer,
  features.outer,
  features.outer,
];

describe("getMaxPowerCount", () => {
  test("returns 0 if no powers", () => {
    expect(getMaxPowerCount(puzzleWithZeroPowers)).toBe(0);
  });
  test("returns power count", () => {
    expect(getMaxPowerCount(puzzleWithFivePowers)).toBe(5);
  });
  test("returns 0 if empty puzzle", () => {
    expect(getMaxPowerCount([])).toBe(0);
  });
});
