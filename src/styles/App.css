/* General */
html {
  --square-size: 6vmax;
  --default-font-size: min(4vh, 0.7cm);

  background-image: url("../images/background.svg");
}

body {
  margin: 0;
  display: flex;
  justify-content: center;
}

h1 {
  all: unset;
  font-size: calc(var(--default-font-size) * 1.2);
  display: block;
  font-weight: bold;
}

small {
  font-size: calc(var(--default-font-size) * 0.5);
}

a {
  color: white;
  text-decoration: none;
}

button {
  all: unset;
  text-decoration: none;
  text-align: center;
  appearance: none;
  font-size: calc(var(--default-font-size) * 0.7);
  font-family: sans-serif;
  background-color: black;
  border: 1px solid white;
  border-radius: 5px;
  color: white;
  margin: 10px;
  padding: 1px 6px;
  width: fit-content;
}

button:disabled,
.pseudodisabled {
  opacity: 0.5;
}

.App {
  color: white;
  font-family: sans-serif;
  font-size: var(--default-font-size);
  display: grid;
  height: 90vh; /* fallback if svh isn't handled */
  height: 100svh;
  width: 100vw;
  overflow: auto;
}

.textButton {
  font-size: calc(var(--default-font-size) * 0.7);
  font-weight: bold;
  background-color: black;
  border: 3px solid white;
  border-radius: 10px;
  color: white;
  margin-bottom: 2vh;
  padding: 1vh 2vh;
}

.info {
  white-space: pre-line;
  display: flex;
  flex-direction: column;
  text-align: center;
  overflow: auto;
  justify-items: center;
  justify-content: space-evenly;
  align-items: center;
  font-size: calc(var(--default-font-size) * 0.7);
}

.infoText {
  margin: 2vmax;
  background-color: black;
}

.info a {
  color: rgb(0 162 255);
}

#game {
  display: grid;
  grid-template-areas:
    "controls controls"
    "location location"
    "botFace botMessage"
    "acquiredFeatures acquiredFeatures"
    "puzzle puzzle";
  grid-template-rows:
    auto
    auto
    1fr
    auto
    auto;
  grid-template-columns: auto 1fr;
  height: 90vh;
  height: 100svh;
}

#pathfinderControls {
  grid-area: controls;
  justify-self: center;
}

#location {
  grid-area: location;
  text-align: center;
  font-size: calc(var(--square-size) * 0.6);
  border-top: 1vmax solid black;
  border-bottom: 1vmax solid black;
  background-color: black;
  color: white;
  width: 100%;
}

#message {
  grid-area: botMessage;
  font-size: calc(var(--square-size) * 0.37);
  min-height: calc(var(--square-size) * 2);
  width: 99%;
  text-align: left;
  overflow: auto;
  white-space: pre-wrap;
  background-color: black;
  border-right: 2vmin solid black;
}

#message > p {
  display: inline;
}

#message::after {
  content: " |";
  animation: blink 1s step-start infinite;
}

@keyframes blink {
  0%,
  100% {
    opacity: 1;
  }

  50% {
    opacity: 0;
  }
}

#botFace {
  grid-area: botFace;
  background-position: top center;
  background-repeat: no-repeat;
  background-size: 80%;
  width: calc(var(--square-size) * 2);
  min-height: calc(var(--square-size) * 2);
  background-color: black;
}

#botFace.happy,
#botFace.glitchy-happy {
  background-image: url("../images/icons/bot-smile.svg");
}

#botFace.sinister,
#botFace.glitchy-sinister {
  background-image: url("../images/icons/bot-sinister.svg");
}

/* Safari has a bug where the background-size isn't respected
if you change the background-image during animation.
Using a pseudo element and changing the opacity works instead.
*/
#botFace.idea {
  position: relative;
}

#botFace.idea::after {
  content: "";
  position: absolute;
  inset: 0;
  background-image: url("../images/icons/bot-idea.svg");
  background-position: top center;
  background-repeat: no-repeat;
  background-size: 80%;
  animation: blink 1s step-start 3;
}

#botFace.glitchy-sinister,
#botFace.glitchy-happy {
  animation: flicker 0.3s infinite;
}

@keyframes flicker {
  0%,
  100% {
    opacity: 1;
  }

  50% {
    opacity: 0.5;
  }

  70% {
    opacity: 0.8;
  }

  90% {
    opacity: 0.3;
  }
}

#acquiredFeatures,
#exitButtons,
#pathfinderButtons {
  display: flex;
  flex-direction: row;
  grid-area: acquiredFeatures;
  border-top: 0.5vmax solid white;
  padding-top: 1vmax;
  height: var(--square-size);
}

#exitButtons,
#pathfinderButtons {
  justify-content: center;
}

#exitButtons > button,
#pathfinderButtons > button,
#exitButtons > #buttonLink {
  margin: 0 10px;
  display: flex;
  align-items: center;
}

#acquiredFeatures .feature {
  background-position: center;
  background-repeat: no-repeat;
  background-size: contain;
  width: calc(var(--square-size) * 0.8);
  height: calc(var(--square-size) * 0.8);
  animation: acquisitionGlow 2s linear;
  border-radius: 30%;
}

@keyframes acquisitionGlow {
  0% {
    box-shadow:
      0 0 20px 10px rgb(255 255 255 / 70%),
      inset 0 0 60px 1px rgb(255 255 255 / 70%);
  }

  100% {
    box-shadow: none;
  }
}

button.feature {
  all: unset;
}

#acquiredFeatures .power,
#powerIcon {
  background-image: url("../images/icons/power.svg");
}

#acquiredFeatures .key,
#keyIcon {
  background-image: url("../images/icons/key.svg");
  background-size: calc(100% - 5px);
}

#acquiredFeatures .blaster,
#blasterIcon {
  background-image: url("../images/icons/blaster.svg");
}

#puzzle {
  grid-area: puzzle;
  touch-action: none;
  display: grid;
  grid-template-columns: repeat(7, var(--square-size));
  grid-template-rows: repeat(9, var(--square-size));
  column-gap: 0;
  justify-content: center;
  margin: calc(var(--square-size) * 0.5);
}

.puzzleSquare {
  touch-action: none;
  border: 1px solid black;
  width: var(--square-size);
  height: var(--square-size);
  background-color: rgb(138 133 133);
  background-position: center;
  background-repeat: no-repeat;
  background-size: contain;
  box-sizing: border-box;
}

.puzzleSquare.start,
#startIcon {
  background-image: url("../images/icons/start.svg");
  background-color: rgb(200 190 78);
}

.puzzleSquare.outer {
  background-color: transparent;
}

.puzzleSquare.power {
  background-image: url("../images/icons/power.svg");
  background-size: calc(100% - 10px);
}

.puzzleSquare.key {
  background-image: url("../images/icons/key.svg");
  background-size: calc(100% - 10px);
}

.puzzleSquare.door,
#doorIcon {
  background-image: url("../images/icons/door.svg");
}

.puzzleSquare.blaster {
  background-image: url("../images/icons/blaster.svg");
  background-size: calc(100% - 10px);
}

.puzzleSquare.portal,
#portalIcon {
  background-color: rgb(140 59 211);
  background-image: url("../images/icons/portal.svg");
}

.puzzleSquare.number1,
#number1Icon {
  background-image: url("../images/icons/number1.svg");
  background-color: rgb(137 132 132);
}

.puzzleSquare.number2,
#number2Icon {
  background-image: url("../images/icons/number2.svg");
  background-color: rgb(137 132 132);
}

.puzzleSquare.number3 {
  background-image: url("../images/icons/number3.svg");
  background-color: rgb(137 132 132);
}

.puzzleSquare.number4 {
  background-image: url("../images/icons/number4.svg");
  background-color: rgb(137 132 132);
}

.puzzleSquare.number5 {
  background-image: url("../images/icons/number5.svg");
  background-color: rgb(137 132 132);
}

.puzzleSquare.exit-opened,
.puzzleSquare.exit,
#exitIcon {
  background-image: url("../images/icons/exit-opened.svg");
  background-color: rgb(200 190 78);
}

.puzzleSquare.exit-closed {
  background-image: url("../images/icons/exit-closed.svg");
  background-color: rgb(200 190 78);
}

.puzzleSquare.ship {
  background-image: url("../images/icons/ship.svg");
  background-color: rgb(67 67 67);
}

.puzzleSquare.pod,
#podIcon {
  background-image: url("../images/icons/pod.svg");
  background-color: rgb(153 17 17);
}

.puzzleSquare.person {
  background-image: url("../images/icons/person.svg");
  background-size: calc(100% + 5px);
}

.puzzleSquare.validNext {
  position: relative;
  box-shadow:
    0 0 10px 5px rgb(60 255 0 / 80%),
    inset 0 0 10px 10px rgb(60 255 0 / 80%);
  transition: box-shadow 0.3s ease-in-out;
}

.door.person {
  animation: doorGlow 1.4s linear;
}

@keyframes doorGlow {
  0% {
    box-shadow: inset 0 0 60px 1px rgb(255 129 74);
  }

  100% {
    box-shadow: none;
  }
}

#civilianIcon {
  background-image: url("../images/icons/civilian.svg");
  background-color: rgb(137 132 132);
}

.puzzleSquare.civilian {
  position: relative;
}

.puzzleSquare.civilian::after {
  content: "";
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background-image: url("../images/icons/civilian.svg");
  touch-action: none;
  background-size: contain;
}

@keyframes boxShadowBlink {
  0%,
  100% {
    box-shadow:
      0 0 10px 5px rgb(103 218 240 / 80%),
      inset 0 0 10px 10px rgb(103 218 240 / 80%);
  }

  50% {
    box-shadow:
      0 0 10px 5px rgb(103 218 240 / 40%),
      inset 0 0 10px 10px rgb(103 218 240 / 50%);
  }
}

.puzzleSquare.hint {
  position: relative;
  box-shadow:
    0 0 10px 5px rgb(103 218 240 / 80%),
    inset 0 0 10px 10px rgb(103 218 240 / 80%);
  transition: box-shadow 0.3s ease-in-out;
  animation: boxShadowBlink 1s step-start infinite;
}

.puzzleSquare.visited {
  position: relative;
}

.puzzleSquare.visited::before {
  content: "";
  position: absolute;
  width: var(--square-size);
  height: var(--square-size);
  background-size: contain;
}

.puzzleSquare.visited.top-left::before,
.puzzleSquare.visited.left-top::before,
.puzzleSquare.visited.bottom-left::before,
.puzzleSquare.visited.left-bottom::before,
.puzzleSquare.visited.top-right::before,
.puzzleSquare.visited.right-top::before,
.puzzleSquare.visited.bottom-right::before,
.puzzleSquare.visited.right-bottom::before {
  background-image: url("../images/icons/slime-turn.svg");
}

.puzzleSquare.visited.top-bottom::before,
.puzzleSquare.visited.bottom-top::before,
.puzzleSquare.visited.left-right::before,
.puzzleSquare.visited.right-left::before {
  background-image: url("../images/icons/slime-straight.svg");
}

.puzzleSquare.visited.center-bottom::before,
.puzzleSquare.visited.bottom-center::before,
.puzzleSquare.visited.center-top::before,
.puzzleSquare.visited.top-center::before,
.puzzleSquare.visited.center-right::before,
.puzzleSquare.visited.right-center::before,
.puzzleSquare.visited.center-left::before,
.puzzleSquare.visited.left-center::before {
  background-image: url("../images/icons/slime-half.svg");
}

/* Safari has a bug where the radial-gradient animation works but
the svg background image isn't displayed until the animation ends,
even when the svg is included as a second layer in the background-image property.
Putting the svg and gradient animation on separate pseudo elements works.
*/

.puzzleSquare.visited.bottom-top-blaster::before,
.puzzleSquare.visited.top-bottom-blaster::before,
.puzzleSquare.visited.left-right-blaster::before,
.puzzleSquare.visited.right-left-blaster::before {
  background-image: url("../images/icons/slime-blaster.svg");
}

.puzzleSquare.visited.bottom-top-blaster::after,
.puzzleSquare.visited.top-bottom-blaster::after,
.puzzleSquare.visited.left-right-blaster::after,
.puzzleSquare.visited.right-left-blaster::after {
  content: "";
  position: absolute;
  inset: 0;
  animation: blasterGlow 0.4s linear;
}

@keyframes blasterGlow {
  0% {
    background-image:
      radial-gradient(
        circle at center,
        rgb(0 211 248) 0%,
        transparent  20%
      );
  }

  10% {
    background-image:
      radial-gradient(
        circle at center,
        rgb(0 211 248) 0%,
        transparent  25%
      );
  }

  20% {
    background-image:
      radial-gradient(
        circle at center,
        rgb(0 211 248) 0%,
        transparent  30%
      );
  }

  30% {
    background-image:
      radial-gradient(
        circle at center,
        rgb(0 211 248) 0%,
        transparent  35%
      );
  }

  40% {
    background-image:
      radial-gradient(
        circle at center,
        rgb(0 211 248) 0%,
        transparent  40%
      );
  }

  50% {
    background-image:
      radial-gradient(
        circle at center,
        rgb(0 211 248) 0%,
        transparent  45%
      );
  }

  60% {
    background-image:
      radial-gradient(
        circle at center,
        rgb(0 211 248) 0%,
        transparent 50%
      );
  }

  70% {
    background-image:
      radial-gradient(
        circle at center,
        rgb(0 211 248) 0%,
        transparent 60%
      );
  }

  80% {
    background-image:
      radial-gradient(
        circle at center,
        rgb(0 211 248) 0%,
        transparent 70%
      );
  }

  100% {
    background-image:
      radial-gradient(
        circle at center,
        rgb(0 211 248) 0%,
        transparent 90%
      );
  }
}

.puzzleSquare.visited.top-right::before,
.puzzleSquare.visited.right-top::before,
.puzzleSquare.visited.top-bottom::before,
.puzzleSquare.visited.bottom-top::before,
.puzzleSquare.visited.center-right::before,
.puzzleSquare.visited.right-center::before,
.puzzleSquare.visited.left-right-blaster::before,
.puzzleSquare.visited.right-left-blaster::before {
  transform: rotate(90deg);
}

.puzzleSquare.visited.bottom-right::before,
.puzzleSquare.visited.right-bottom::before,
.puzzleSquare.visited.center-bottom::before,
.puzzleSquare.visited.bottom-center::before {
  transform: rotate(180deg);
}

.puzzleSquare.visited.bottom-left::before,
.puzzleSquare.visited.left-bottom::before,
.puzzleSquare.visited.center-left::before,
.puzzleSquare.visited.left-center::before {
  transform: rotate(270deg);
}

.infoIcon {
  display: inline-block;
  background-position: center;
  background-repeat: no-repeat;
  background-size: contain;
  width: var(--square-size);
  height: var(--square-size);
}

.smallInfoIcon {
  display: inline-block;
  background-position: center;
  background-repeat: no-repeat;
  background-size: contain;
  width: calc(var(--square-size) * 0.37);
  height: calc(var(--square-size) * 0.37);
}

.customMessage {
  white-space: pre-line;
  display: flex;
  flex-direction: column;
  text-align: center;
  overflow: auto;
  justify-items: center;
  justify-content: space-evenly;
  align-items: center;
  font-size: calc(var(--default-font-size) * 0.7);
}

.customMessage > a {
  white-space: pre-line;
  text-wrap: wrap;
  overflow-wrap: break-word;
  word-break: break-all;
  padding: 10px;
}

#custom-message-buttons {
  display: flex;
  flex-direction: row;
  justify-content: space-around;
  width: 100%;
}

#custom-message-buttons > button {
  margin: 10px;
}

#sharePrompt {
  align-self: center;
}

.blockElement {
  display: block;
}

/* Large screen, landscape */
@media (orientation: landscape) and (min-height: 600px) and (min-width: 936px) {
  html {
    --square-size: min(6vmin, 1.5cm);
  }

  .App,
  #game {
    max-width: calc(var(--square-size) * 15);
    height: auto;
    overflow-x: hidden;
  }

  #game {
    grid-template-rows:
      auto
      auto
      calc(var(--square-size) * 3)
      auto
      1fr;
  }
}

/* Large screen, portrait */
@media (orientation: portrait) and (min-height: 600px) and (min-width: 600px) {
  .App,
  #game {
    height: auto;
    overflow-x: hidden;
  }

  #game {
    grid-template-rows:
      auto
      auto
      calc(var(--square-size) * 3)
      auto
      1fr;
  }
}
